#!/usr/bin/env node
require('dotenv').config()

const util = require('util')
const fs = require('fs')
const glob = require('glob')
const scraper = new require('page-scraper')({
  baseUrl: 'http://www.channel101.com/episode',
  uri: {}
})
const Youtube = require('youtube-api')
const readJson = require('r-json')
const  Lien = require('lien')
const Logger = require('bug-killer')
const  opn = require('opn')
const  prettyBytes = require('pretty-bytes')

const CREDENTIALS = readJson(`${__dirname}/credentials.json`)

const oauth = Youtube.authenticate({
  type: 'oauth',
  client_id: CREDENTIALS.web.client_id,
  client_secret: CREDENTIALS.web.client_secret,
  redirect_url: CREDENTIALS.web.redirect_uris[0]
})

opn(oauth.generateAuthUrl({
  access_type: 'offline',
  scope: ['https://www.googleapis.com/auth/youtube.upload']
}))

const TITLE_PREFIX = 'Channel 101 - '

function range(start, end) {
  end == null && ([start, end] = [0, start])
  return [...Array(end + 1).keys()].map((n, index) => n + start).filter(n => n <= end)
}

const scrape = index => (
  new Promise((resolve, reject) => {
    scraper.scrape(`/${index}`, (error, scrape) => {
      if (error) reject(error)
      const title = scrape('.title').first().text().trim().replace(/\s+/g, ' ')
      const description = scrape('#creditsContainer').text().replace(/\t+/g, ' ').trim()
      const fullTitle = TITLE_PREFIX + title
      resolve({
        title,
        fullTitle,
        description
      })
    })
  })
)

const authenticate = new Promise(resolve => {
  const server = new Lien({
    host: 'localhost',
    port: 5000
  })

  server.addPage('/oauth2callback', lien => {
    oauth.getToken(lien.query.code, (error, tokens) => {
      if (error) {
        return Logger.log(error)
      }
      console.log('tokens:', tokens)
      oauth.setCredentials(tokens)
      resolve()
    })
  })
});

//const episodes = range(process.env.FIRST_EPISODE, process.env.LAST_EPISODE)
const episodes = [550, 559, 129, 130, 131, 132, 134, 137, 140]

authenticate.then(() => {
  let promise = Promise.resolve()
  episodes.forEach(episode => {
    promise = promise.then(() => new Promise((resolve, reject) => scrape(episode).then(({
      title,
      fullTitle,
      description
    }) => (
      new Promise((resolve, reject) => {
        glob(`${__dirname}/${fullTitle}*.m4v`,
          (error, files) => error ? reject(error) : resolve({
            title,
            description,
            path: files[0]
          })
        )
      })
    )).then(({title, description, path}) => {
      if (!path) return
      const request = Youtube.videos.insert({
        resource: {
          snippet: {
            title: title,
            description: description
          },
          status: {
            privacyStatus: 'public'
          }
        },
        part: 'snippet,status',
        media: {
          body: fs.createReadStream(path)
        }
      }, (error, data) => {
        error ? reject(error) : resolve(data)
      })
      setInterval(function() {
        Logger.log(`${prettyBytes(request.req.connection._bytesDispatched)} bytes uploaded.`)
      }, 250)
    }).catch(console.error)
  )).catch(console.error)})
})
