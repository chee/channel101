#!/usr/bin/env node
require('dotenv').config()

const util = require('util')
const fs = require('fs')
const glob = require('glob')
const scraper = new require('page-scraper')({
  baseUrl: 'http://www.channel101.com/episode',
  uri: {}
})
const google = require('google-cli-auth')

const { log, print_error } = console
console.log = Function.prototype

const FIRST_EPISODE = Number(process.env.FIRST_EPISODE)
const LAST_EPISODE = 128 || Number(process.env.LAST_EPISODE)

const CLIENT_ID = process.env.CLIENT_ID
const SECRET = process.env.SECRET

const TITLE_PREFIX = 'Channel 101 - '

function range(start, end) {
  end == null && ([start, end] = [0, start])
  return [...Array(end + 1).keys()].map((n, index) => n + start).filter(n => n <= end)
}

const data = { episodes: [] }

const scrape = index => (
  new Promise((resolve, reject) => {
    scraper.scrape(`/${index}`, (error, scrape) => {
      if (error) reject(error)
      const title = scrape('.title').first().text().trim().replace(/\s+/g, ' ')
      const description = scrape('#creditsContainer').text().replace(/\t+/g, ' ').trim()
      const fullTitle = TITLE_PREFIX + title
      resolve({
        title,
        fullTitle,
        description
      })
    })
  })
)

const login = new Promise((resolve, reject) => {
  google({
    name: 'channel101',
    client_id: CLIENT_ID,
    client_secret: SECRET,
    scope: ['https://www.googleapis.com/auth/youtube.upload']
  }, (error, token) => error ? reject(error) : resolve(token))
}).then(token => {
  data.token = token
})

let promise = Promise.resolve()
range(FIRST_EPISODE, LAST_EPISODE).forEach(episode => {
  promise = promise.then(() => (
    scrape(`${episode}`).then(({title, fullTitle, description}) => (
      new Promise((resolve, reject) => {
        glob(`${__dirname}/${fullTitle}*.m4v`,
          (error, files) => error ? reject(error) : resolve({
            title,
            description,
            path: files[0]
          })
        )
      })
    )).then((video) => {
      data.episodes.push(video)
      return data
    })
  ))
})

Promise.all([login, promise]).then(() => log(JSON.stringify(data))).catch(error => print_error(error) || process.exit(2))
